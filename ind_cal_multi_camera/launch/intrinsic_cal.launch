<?xml version="1.0" ?>
<launch>

    <env name="ROSCONSOLE_CONFIG_FILE" value="$(find ind_cal_multi_camera)/config/rosconsole.config" />

   <arg name="asus" default="false" />
   <arg name="asus_device_id" default="2@1"/>
   <arg name="asus_camera_name" default="asus1"/>
   <arg name="asus_calprefix" default="1"/>

   <arg name="basler" default="true" />
   <!--arg name="basler_sn" default="21511093"/-->
   <!--arg name="basler_sn" default="21511083"/-->
   <!--arg name="basler_sn" default="21135424"/-->
   <!--arg name="basler_sn" default="21516700"/-->
   <!--arg name="basler_sn" default="21511094"/-->
   <!--arg name="basler_sn" default="21499591"/-->
   <!--arg name="basler_sn" default="21511088"/-->
   <!--arg name="basler_sn" default="21511095"/-->
   <!--arg name="basler_sn" default="21496537"/-->
   <!--arg name="basler_sn" default="21511086"/-->
    <arg name ="basler_sn" default="21135423"/>

   <!-- Launch the asus camera node -->
   <include if="$(arg asus)" file="$(find ind_cal_multi_camera)/launch/kinect_camera.launch" >
     <arg name="topic_ns" value="$(arg asus_camera_name)" />
     <arg name="tf_prefix" value="$(arg asus_camera_name)"/>
     <arg name="cal_prefix" value="$(arg asus_calprefix)" />
     <arg name="device_id" value="$(arg asus_device_id)" />
     <arg name="publish_tf" value="false" />
   </include> 

   <!-- Launch the basler camera -->
   <include file="$(find ind_cal_multi_camera)/launch/basler_camera.launch" >
       <arg name="camera_name" value="Basler1"/>
       <arg name="camera_aravis_package" value="true"/>
       <arg name="basler_sn" value="$(arg basler_sn)"/>
       <arg name="exposure_auto" value="auto_once"/>
       <arg name="exposure_time" value="10000"/>
       <arg name="gain_auto" value="Once" />
       <arg name="gain" value="0" />
       <arg name="frame_rate" value="10"/>
       <arg name="trigger_mode" value="Off"/>
       <arg name="trigger_source" value="Line1"/>
       <arg name="pixel_format" value="Mono8"/>
   </include>

   <!-- Launch the extrinsic calibration service -->
   <node pkg="industrial_extrinsic_cal" type="service_node" name="calibration_service_node" output="screen" >
     <param name="yaml_file_path" value="$(find ind_cal_multi_camera)/yaml/" />
     <param name="use_circle_detector" value="false"/>
     <param name="white_blobs" value="false"/>
     <rosparam if="$(arg basler)">
       camera_file: "basler_camera.yaml"
       target_file: "m10x10.yaml"
       cal_job_file: "basler_caljob.yaml"
     </rosparam>
     <rosparam if="$(arg asus)">
       camera_file: "asus_camera.yaml"
       target_file: "m10x10.yaml"
       cal_job_file: "asus_caljob.yaml"
     </rosparam>
     <rosparam if="$(arg asus)">
       camera_file: "asus_camera.yaml"
       target_file: "m10x10.yaml"
       cal_job_file: "asus_caljob.yaml"
     </rosparam>
   </node> 

   <!-- Start gui with calibration button -->
   <node name="cal_gui" pkg="calibrate_gui" type="calibrate_gui" />

   <!-- Start scene trigger node -->
   <node name="scene_trigger" pkg="industrial_extrinsic_cal" type="camera_observer_scene_trigger" output="screen" >
	<param name="target_type" value="2" />
	<param name="pattern_rows" value="10" />
	<param name="pattern_cols" value="10" />
	<param name="red_min" value="130"/>
	<param name="red_max" value="255"/>
	<param name="use_circle_detector" value="false"/>
	<param name="white_blobs" value="false"/>
   </node>

   <node name="results_view" pkg="image_view" type="image_view" >
              <remap from="image" to="/observer_results_image"/>
   </node>

   <node name="raw_view" pkg="image_view" type="image_view" >
              <remap from="image" to="/observer_raw_image"/>
   </node>

   <node name="unnecessary_view" pkg="image_view" type="image_view" >
              <remap if="$(arg basler)" from="image" to="/Basler1/image_raw"/>
              <remap if="$(arg asus)" from="image" to="/asus1/rgb/image_rect_color"/>
   </node>

</launch>
